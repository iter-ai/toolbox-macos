#!/usr/bin/env node --loader tsx
import fs from "fs";
import plist from "plist";
import url from "url";
import yaml from "yaml";

import { Shortcut } from "../lib/base.ts";
import { ShortcutToolSpec } from "../lib/metadata.ts";
import { Path, Shell } from "../lib/native.ts";
import { ActionTemplate, VariableTemplate } from "../lib/template.ts";

export const build = async () => {
  const actions: Shortcut.Action[] = [];

  // comment and metadata
  actions.push(
    ActionTemplate.generateComment({
      text:
        "Shortcut generated by iter toolbox. See https://github.com/iter-ai/toolbox-macos\n\n" +
        'To install the shortcut, scroll to the bottom of the file or press "return"',
    }),
  );

  // parse directory from input and branch off based on `tool`
  const dictionaryInput = ActionTemplate.generateDictionaryInput();
  actions.push(dictionaryInput);

  const toolValue = ActionTemplate.generateDictionaryValue({
    dictionaryId: dictionaryInput.WFWorkflowActionParameters.UUID,
    key: "tool",
  });
  actions.push(toolValue);

  for (const { definition, override, metadata } of yaml.parse(
    fs.readFileSync(Path.toolboxSpec, "utf-8"),
  ) as ShortcutToolSpec[]) {
    const endpoint = { ...definition, ...(override ?? {}) };

    const template = metadata.template;
    const parameterIdToTemplatePath = metadata.parameterIdToTemplatePath;

    // create a branch based on the tool
    const beginBranch = ActionTemplate.generateIfActionOutputEquals({
      actionId: toolValue.WFWorkflowActionParameters.UUID,
      value: endpoint.name,
    });
    actions.push(beginBranch);

    // get list of parameters from the action
    for (const [paramId] of Object.entries(endpoint.parameters) || []) {
      // set the parameter value with a variable
      const parameterDictionaryValue = ActionTemplate.generateDictionaryValue({
        dictionaryId: dictionaryInput.WFWorkflowActionParameters.UUID,
        dictionaryKey: "params",
        key: paramId,
      });
      actions.push(parameterDictionaryValue);

      const setVariable = ActionTemplate.generateSetVariable({
        outputId: parameterDictionaryValue.WFWorkflowActionParameters.UUID,
        variableName: paramId,
      });
      actions.push(setVariable);

      template.WFWorkflowActionParameters = VariableTemplate.applyVariableReferenceToPath({
        object: template.WFWorkflowActionParameters!,
        path: parameterIdToTemplatePath[paramId]!,
        variableId: paramId,
      });
    }

    // add modified action to the branch
    const actionUUID = Shortcut.getUUID();
    actions.push({
      WFWorkflowActionIdentifier: template.WFWorkflowActionIdentifier,
      WFWorkflowActionParameters: {
        ...template.WFWorkflowActionParameters,
        UUID: actionUUID,
      },
    });

    // encode action output in base64
    const base64 = ActionTemplate.generateEncodeBase64({
      outputId: actionUUID,
    });
    actions.push(base64);

    // output the base64 string and exit
    const outputAndExit = ActionTemplate.generateOutputAndExit({
      outputId: base64.WFWorkflowActionParameters.UUID,
    });
    actions.push(outputAndExit);

    // end the branch
    const endBranch = ActionTemplate.generateEndIf({
      groupingIdentifier: beginBranch.WFWorkflowActionParameters.GroupingIdentifier,
    });
    actions.push(endBranch);
  }

  // output the workflow and spec
  const workflow = Shortcut.createWorkflow(actions);
  fs.writeFileSync(Path.toolboxShortcutFile, plist.build(workflow));
  fs.writeFileSync(Path.shortcutDebugJson, JSON.stringify(workflow, null, 2));
  Shell.signShortcut({ path: Path.toolboxShortcutFile, generatedPath: Path.toolboxShortcutFile });
};

// Run build if invoked from cli
if (url.fileURLToPath(import.meta.url) === process.argv[1]) {
  await build();
}
